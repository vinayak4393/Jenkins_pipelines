pipeline {
    agent any

    environment {
        MAVEN_OPTS = '-Dmaven.test.failure.ignore=false'
        SONARQUBE_ENV = 'SonarQubeServer'       // Define in Jenkins > Manage Jenkins > Configure System
        CREDENTIALS_ID = 'your-credentials-id'  // Git credentials ID
        GIT_URL = 'https://your-git-repo.git'
        GIT_BRANCH = 'main'
    }

    tools {
        maven 'Maven 3.8.1' // Define in Jenkins global tools config
        jdk 'JDK 11'        // Define in Jenkins global tools config
    }

    stages {

        stage("Checkout") {
            steps {
                git(
                    url: "${env.GIT_URL}",
                    credentialsId: "${env.CREDENTIALS_ID}",
                    branch: "${env.GIT_BRANCH}"
                )
            }
        }

        stage("SonarQube Analysis") {
            environment {
                scannerHome = tool 'SonarScanner'
            }
            steps {
                withSonarQubeEnv("${env.SONARQUBE_ENV}") {
                    sh "${scannerHome}/bin/sonar-scanner"
                }
            }
        }

        stage("Maven Build") {
            steps {
                echo "Building the project"
                sh 'mvn clean install -DskipTests'
            }
        }

        stage("Maven Test") {
            steps {
                echo "Running tests"
                sh 'mvn test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }

        stage("Maven Deploy") {
            when {
                branch 'main'
            }
            steps {
                echo "Deploying artifact"
                sh 'mvn deploy'
            }
        }

        // Optional Docker Build Stage
        /*
        stage("Docker Build & Push") {
            steps {
                script {
                    dockerImage = docker.build("your-image-name:${env.BUILD_NUMBER}")
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-credentials-id') {
                        dockerImage.push()
                    }
                }
            }
        }
        */

    }

    post {
        success {
            echo 'Build completed successfully.'
        }
        failure {
            echo 'Build failed!'
        }
        always {
            archiveArtifacts artifacts: '**/target/*.jar', allowEmptyArchive: true
            cleanWs()
        }
    }
}
